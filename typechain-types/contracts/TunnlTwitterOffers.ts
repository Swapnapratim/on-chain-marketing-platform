/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TunnlTwitterOffers {
  export type ConfigStruct = {
    automationUpkeepBatchSize: BigNumberish;
    advertiserFeePercentageBP: BigNumberish;
    creatorFeePercentageBP: BigNumberish;
    functionsCallbackGasLimit: BigNumberish;
    flatFeeUsdc: BigNumberish;
    minOfferDurationSeconds: BigNumberish;
    minAcceptanceDurationSeconds: BigNumberish;
    maxVerificationDelaySeconds: BigNumberish;
    functionsSubscriptionId: BigNumberish;
    functionsDonId: BytesLike;
    functionsEncryptedSecretsReference: BytesLike;
    functionsVerificationRequestScript: string;
    functionsPayoutRequestScript: string;
  };

  export type ConfigStructOutput = [
    automationUpkeepBatchSize: bigint,
    advertiserFeePercentageBP: bigint,
    creatorFeePercentageBP: bigint,
    functionsCallbackGasLimit: bigint,
    flatFeeUsdc: bigint,
    minOfferDurationSeconds: bigint,
    minAcceptanceDurationSeconds: bigint,
    maxVerificationDelaySeconds: bigint,
    functionsSubscriptionId: bigint,
    functionsDonId: string,
    functionsEncryptedSecretsReference: string,
    functionsVerificationRequestScript: string,
    functionsPayoutRequestScript: string
  ] & {
    automationUpkeepBatchSize: bigint;
    advertiserFeePercentageBP: bigint;
    creatorFeePercentageBP: bigint;
    functionsCallbackGasLimit: bigint;
    flatFeeUsdc: bigint;
    minOfferDurationSeconds: bigint;
    minAcceptanceDurationSeconds: bigint;
    maxVerificationDelaySeconds: bigint;
    functionsSubscriptionId: bigint;
    functionsDonId: string;
    functionsEncryptedSecretsReference: string;
    functionsVerificationRequestScript: string;
    functionsPayoutRequestScript: string;
  };

  export type OfferStruct = {
    status: BigNumberish;
    advertiserFeePercentageBP: BigNumberish;
    creatorFeePercentageBP: BigNumberish;
    advertiser: AddressLike;
    contentCreator: AddressLike;
    flatFeeUsdc: BigNumberish;
    creationDate: BigNumberish;
    acceptanceExpirationDate: BigNumberish;
    payoutDate: BigNumberish;
    dateToAttemptVerification: BigNumberish;
    maxValueUsdc: BigNumberish;
    amountPaidUsdc: BigNumberish;
    verificationFailureMessage: string;
    payoutFailureMessage: string;
    offerDurationSeconds: BigNumberish;
  };

  export type OfferStructOutput = [
    status: bigint,
    advertiserFeePercentageBP: bigint,
    creatorFeePercentageBP: bigint,
    advertiser: string,
    contentCreator: string,
    flatFeeUsdc: bigint,
    creationDate: bigint,
    acceptanceExpirationDate: bigint,
    payoutDate: bigint,
    dateToAttemptVerification: bigint,
    maxValueUsdc: bigint,
    amountPaidUsdc: bigint,
    verificationFailureMessage: string,
    payoutFailureMessage: string,
    offerDurationSeconds: bigint
  ] & {
    status: bigint;
    advertiserFeePercentageBP: bigint;
    creatorFeePercentageBP: bigint;
    advertiser: string;
    contentCreator: string;
    flatFeeUsdc: bigint;
    creationDate: bigint;
    acceptanceExpirationDate: bigint;
    payoutDate: bigint;
    dateToAttemptVerification: bigint;
    maxValueUsdc: bigint;
    amountPaidUsdc: bigint;
    verificationFailureMessage: string;
    payoutFailureMessage: string;
    offerDurationSeconds: bigint;
  };
}

export interface TunnlTwitterOffersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOffer"
      | "addAdmin"
      | "cancelOffer"
      | "checkUpkeep"
      | "createOffer"
      | "getConfig"
      | "getOffers"
      | "handleOracleFulfillment"
      | "owner"
      | "performUpkeep"
      | "removeAdmin"
      | "renounceOwnership"
      | "retryRequests"
      | "s_config"
      | "setConfig"
      | "setVerificationStatus"
      | "submitTweet"
      | "transferOwnership"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Accepted"
      | "Created"
      | "OfferStatus"
      | "OwnershipTransferred"
      | "PreviousConfig"
      | "PreviousOffer"
      | "RequestFulfilled"
      | "RequestSent(bytes32)"
      | "RequestSent(bytes32,bytes32,uint8)"
      | "Response"
      | "Submitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOffers",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryRequests",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "s_config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [TunnlTwitterOffers.ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationStatus",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTweet",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOffers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTweet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AcceptedEvent {
  export type InputTuple = [
    offerId: BytesLike,
    payoutDate: BigNumberish,
    contentCreator: AddressLike
  ];
  export type OutputTuple = [
    offerId: string,
    payoutDate: bigint,
    contentCreator: string
  ];
  export interface OutputObject {
    offerId: string;
    payoutDate: bigint;
    contentCreator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreatedEvent {
  export type InputTuple = [
    offerId: BytesLike,
    offer: TunnlTwitterOffers.OfferStruct
  ];
  export type OutputTuple = [
    offerId: string,
    offer: TunnlTwitterOffers.OfferStructOutput
  ];
  export interface OutputObject {
    offerId: string;
    offer: TunnlTwitterOffers.OfferStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferStatusEvent {
  export type InputTuple = [
    offerId: BytesLike,
    previousStatus: BigNumberish,
    currentStatus: BigNumberish
  ];
  export type OutputTuple = [
    offerId: string,
    previousStatus: bigint,
    currentStatus: bigint
  ];
  export interface OutputObject {
    offerId: string;
    previousStatus: bigint;
    currentStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreviousConfigEvent {
  export type InputTuple = [previousConfig: TunnlTwitterOffers.ConfigStruct];
  export type OutputTuple = [
    previousConfig: TunnlTwitterOffers.ConfigStructOutput
  ];
  export interface OutputObject {
    previousConfig: TunnlTwitterOffers.ConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreviousOfferEvent {
  export type InputTuple = [
    offerId: BytesLike,
    previousOffer: TunnlTwitterOffers.OfferStruct
  ];
  export type OutputTuple = [
    offerId: string,
    previousOffer: TunnlTwitterOffers.OfferStructOutput
  ];
  export interface OutputObject {
    offerId: string;
    previousOffer: TunnlTwitterOffers.OfferStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSent_bytes32_Event {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSent_bytes32_bytes32_uint8_Event {
  export type InputTuple = [
    offerId: BytesLike,
    functionsRequestId: BytesLike,
    offerStatus: BigNumberish
  ];
  export type OutputTuple = [
    offerId: string,
    functionsRequestId: string,
    offerStatus: bigint
  ];
  export interface OutputObject {
    offerId: string;
    functionsRequestId: string;
    offerStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResponseEvent {
  export type InputTuple = [
    offerId: BytesLike,
    functionsRequestId: BytesLike,
    previousStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    offerId: string,
    functionsRequestId: string,
    previousStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    offerId: string;
    functionsRequestId: string;
    previousStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmittedEvent {
  export type InputTuple = [offerId: BytesLike];
  export type OutputTuple = [offerId: string];
  export interface OutputObject {
    offerId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TunnlTwitterOffers extends BaseContract {
  connect(runner?: ContractRunner | null): TunnlTwitterOffers;
  waitForDeployment(): Promise<this>;

  interface: TunnlTwitterOffersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOffer: TypedContractMethod<
    [offerId: BytesLike, contentCreator: AddressLike],
    [void],
    "nonpayable"
  >;

  addAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  cancelOffer: TypedContractMethod<[offerId: BytesLike], [void], "nonpayable">;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;

  createOffer: TypedContractMethod<
    [
      offerId: BytesLike,
      maxPaymentUsdc: BigNumberish,
      acceptanceDurationSeconds: BigNumberish,
      _offerDurationSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getConfig: TypedContractMethod<
    [],
    [TunnlTwitterOffers.ConfigStructOutput],
    "view"
  >;

  getOffers: TypedContractMethod<
    [offerIds: BytesLike[]],
    [TunnlTwitterOffers.OfferStructOutput[]],
    "view"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  performUpkeep: TypedContractMethod<
    [performData: BytesLike],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  retryRequests: TypedContractMethod<
    [offerIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  s_config: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string
      ] & {
        automationUpkeepBatchSize: bigint;
        advertiserFeePercentageBP: bigint;
        creatorFeePercentageBP: bigint;
        functionsCallbackGasLimit: bigint;
        flatFeeUsdc: bigint;
        minOfferDurationSeconds: bigint;
        minAcceptanceDurationSeconds: bigint;
        maxVerificationDelaySeconds: bigint;
        functionsSubscriptionId: bigint;
        functionsDonId: string;
        functionsEncryptedSecretsReference: string;
        functionsVerificationRequestScript: string;
        functionsPayoutRequestScript: string;
      }
    ],
    "view"
  >;

  setConfig: TypedContractMethod<
    [_config: TunnlTwitterOffers.ConfigStruct],
    [void],
    "nonpayable"
  >;

  setVerificationStatus: TypedContractMethod<
    [offerId: BytesLike, isTweetVerified: boolean],
    [void],
    "nonpayable"
  >;

  submitTweet: TypedContractMethod<
    [offerId: BytesLike, verificationDelaySeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOffer"
  ): TypedContractMethod<
    [offerId: BytesLike, contentCreator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelOffer"
  ): TypedContractMethod<[offerId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "createOffer"
  ): TypedContractMethod<
    [
      offerId: BytesLike,
      maxPaymentUsdc: BigNumberish,
      acceptanceDurationSeconds: BigNumberish,
      _offerDurationSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<[], [TunnlTwitterOffers.ConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getOffers"
  ): TypedContractMethod<
    [offerIds: BytesLike[]],
    [TunnlTwitterOffers.OfferStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[performData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retryRequests"
  ): TypedContractMethod<[offerIds: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "s_config"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string
      ] & {
        automationUpkeepBatchSize: bigint;
        advertiserFeePercentageBP: bigint;
        creatorFeePercentageBP: bigint;
        functionsCallbackGasLimit: bigint;
        flatFeeUsdc: bigint;
        minOfferDurationSeconds: bigint;
        minAcceptanceDurationSeconds: bigint;
        maxVerificationDelaySeconds: bigint;
        functionsSubscriptionId: bigint;
        functionsDonId: string;
        functionsEncryptedSecretsReference: string;
        functionsVerificationRequestScript: string;
        functionsPayoutRequestScript: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [_config: TunnlTwitterOffers.ConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVerificationStatus"
  ): TypedContractMethod<
    [offerId: BytesLike, isTweetVerified: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitTweet"
  ): TypedContractMethod<
    [offerId: BytesLike, verificationDelaySeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Accepted"
  ): TypedContractEvent<
    AcceptedEvent.InputTuple,
    AcceptedEvent.OutputTuple,
    AcceptedEvent.OutputObject
  >;
  getEvent(
    key: "Created"
  ): TypedContractEvent<
    CreatedEvent.InputTuple,
    CreatedEvent.OutputTuple,
    CreatedEvent.OutputObject
  >;
  getEvent(
    key: "OfferStatus"
  ): TypedContractEvent<
    OfferStatusEvent.InputTuple,
    OfferStatusEvent.OutputTuple,
    OfferStatusEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PreviousConfig"
  ): TypedContractEvent<
    PreviousConfigEvent.InputTuple,
    PreviousConfigEvent.OutputTuple,
    PreviousConfigEvent.OutputObject
  >;
  getEvent(
    key: "PreviousOffer"
  ): TypedContractEvent<
    PreviousOfferEvent.InputTuple,
    PreviousOfferEvent.OutputTuple,
    PreviousOfferEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent(bytes32)"
  ): TypedContractEvent<
    RequestSent_bytes32_Event.InputTuple,
    RequestSent_bytes32_Event.OutputTuple,
    RequestSent_bytes32_Event.OutputObject
  >;
  getEvent(
    key: "RequestSent(bytes32,bytes32,uint8)"
  ): TypedContractEvent<
    RequestSent_bytes32_bytes32_uint8_Event.InputTuple,
    RequestSent_bytes32_bytes32_uint8_Event.OutputTuple,
    RequestSent_bytes32_bytes32_uint8_Event.OutputObject
  >;
  getEvent(
    key: "Response"
  ): TypedContractEvent<
    ResponseEvent.InputTuple,
    ResponseEvent.OutputTuple,
    ResponseEvent.OutputObject
  >;
  getEvent(
    key: "Submitted"
  ): TypedContractEvent<
    SubmittedEvent.InputTuple,
    SubmittedEvent.OutputTuple,
    SubmittedEvent.OutputObject
  >;

  filters: {
    "Accepted(bytes32,uint32,address)": TypedContractEvent<
      AcceptedEvent.InputTuple,
      AcceptedEvent.OutputTuple,
      AcceptedEvent.OutputObject
    >;
    Accepted: TypedContractEvent<
      AcceptedEvent.InputTuple,
      AcceptedEvent.OutputTuple,
      AcceptedEvent.OutputObject
    >;

    "Created(bytes32,tuple)": TypedContractEvent<
      CreatedEvent.InputTuple,
      CreatedEvent.OutputTuple,
      CreatedEvent.OutputObject
    >;
    Created: TypedContractEvent<
      CreatedEvent.InputTuple,
      CreatedEvent.OutputTuple,
      CreatedEvent.OutputObject
    >;

    "OfferStatus(bytes32,uint8,uint8)": TypedContractEvent<
      OfferStatusEvent.InputTuple,
      OfferStatusEvent.OutputTuple,
      OfferStatusEvent.OutputObject
    >;
    OfferStatus: TypedContractEvent<
      OfferStatusEvent.InputTuple,
      OfferStatusEvent.OutputTuple,
      OfferStatusEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PreviousConfig(tuple)": TypedContractEvent<
      PreviousConfigEvent.InputTuple,
      PreviousConfigEvent.OutputTuple,
      PreviousConfigEvent.OutputObject
    >;
    PreviousConfig: TypedContractEvent<
      PreviousConfigEvent.InputTuple,
      PreviousConfigEvent.OutputTuple,
      PreviousConfigEvent.OutputObject
    >;

    "PreviousOffer(bytes32,tuple)": TypedContractEvent<
      PreviousOfferEvent.InputTuple,
      PreviousOfferEvent.OutputTuple,
      PreviousOfferEvent.OutputObject
    >;
    PreviousOffer: TypedContractEvent<
      PreviousOfferEvent.InputTuple,
      PreviousOfferEvent.OutputTuple,
      PreviousOfferEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestSent(bytes32)": TypedContractEvent<
      RequestSent_bytes32_Event.InputTuple,
      RequestSent_bytes32_Event.OutputTuple,
      RequestSent_bytes32_Event.OutputObject
    >;
    "RequestSent(bytes32,bytes32,uint8)": TypedContractEvent<
      RequestSent_bytes32_bytes32_uint8_Event.InputTuple,
      RequestSent_bytes32_bytes32_uint8_Event.OutputTuple,
      RequestSent_bytes32_bytes32_uint8_Event.OutputObject
    >;

    "Response(bytes32,bytes32,uint8,uint8)": TypedContractEvent<
      ResponseEvent.InputTuple,
      ResponseEvent.OutputTuple,
      ResponseEvent.OutputObject
    >;
    Response: TypedContractEvent<
      ResponseEvent.InputTuple,
      ResponseEvent.OutputTuple,
      ResponseEvent.OutputObject
    >;

    "Submitted(bytes32)": TypedContractEvent<
      SubmittedEvent.InputTuple,
      SubmittedEvent.OutputTuple,
      SubmittedEvent.OutputObject
    >;
    Submitted: TypedContractEvent<
      SubmittedEvent.InputTuple,
      SubmittedEvent.OutputTuple,
      SubmittedEvent.OutputObject
    >;
  };
}
