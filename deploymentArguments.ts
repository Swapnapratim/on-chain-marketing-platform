// These values are generated by the uploadScriptGistsAndGenerateOffchainSects.ts script in the Tunnl-Functions-Scripts repo
const verifyScriptHash = '0c3b015818ca3fb33f5fdd280843a8e1f537fbb8bda04410c1753f27cf440df9'
const payoutScriptHash = '64007a35a35142c38cfeccd758aa360c495ce945d0fb0d1960aa93765bf5703c'
const encryptedSecretsReference = '0xb207a67927a9994afcf0008f7ba0ab24029a08dab2dd70163ef362a88fc97732d31129556bb5db09cb060858835a44d47297320092e9cb13f75a967edc4f0f83b39982e4c985ea07778c69b02db149bfa5b79cff03ab5f75831f2ae89c42a389bfac4cd61a46acd797752117744eb00a4e218062884a50bb56ff16e5ae2d0e60397c6e0fdeff005ffd7ab2b2c759ab4924807757f499bcf441e653e6b660d17b20'

const isMainnet = process.env.STAGE === 'mainnet'

let functionsRouterAddress: string
let usdcTokenAddress: string
if (isMainnet) {
  functionsRouterAddress = '0xf9b8fc078197181c841c296c876945aaa425b278'
  usdcTokenAddress = '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913'
} else {
  functionsRouterAddress = '0xC17094E3A1348E5C7544D4fF8A36c28f2C6AAE28'
  usdcTokenAddress = '0x5fd84259d66Cd46123540766Be93DFE6D43130D7'
}

// This fetches the Functions script hosted at a given secret URL, hashes it, and compares it to the expected hash. If they match, the script is executed.
// This allows us to store our Functions scripts offchain, keeping our logic private and reducing onchain gas costs.
const generateOnchainFunctionsScript = (scriptHash: string, secretUrlField: string): string => {
  return `const s=(await Functions.makeHttpRequest({url:secrets.${secretUrlField},responseType:'text'})).data;if(Array.from(new Uint8Array(await crypto.subtle.digest("SHA-256",new TextEncoder().encode(s)))).map((b)=>b.toString(16).padStart(2,"0")).join("")!=='${scriptHash}'){throw Error('Script hash mismatch')};return eval(\`(async()=>{\${s}})()\`)`
}

const contractConfig = {
  automationUpkeepBatchSize: 1,
  advertiserFeePercentageBP: 500, // 5%
  creatorFeePercentageBP: 500, // 5%
  functionsCallbackGasLimit: 300_000,
  flatFeeUsdc: isMainnet ? 1.99 * 10 ** 6 : 0.05 * 10 ** 6, // For testnet use $0.05 USDC and for mainnet use $1.99

  minOfferDurationSeconds: isMainnet ? 4 * 60 * 60 * 24 : 4 * 60 * 60, // For testnet we will use 4 hours and on mainnet we will use 4 days
  minAcceptanceDurationSeconds: 60 * 60 * 24, // 1 day
  maxVerificationDelaySeconds: 60 * 60, // 60 minutes

  functionsSubscriptionId: isMainnet ? 19 : 176,
  functionsDonId: isMainnet ? '0x66756e2d626173652d6d61696e6e65742d310000000000000000000000000000' : '0x66756e2d6f7074696d69736d2d7365706f6c69612d3100000000000000000000',
  functionsEncryptedSecretsReference: encryptedSecretsReference,
  functionsVerificationRequestScript: generateOnchainFunctionsScript(verifyScriptHash, 'verifyScriptUrl'),
  functionsPayoutRequestScript: generateOnchainFunctionsScript(payoutScriptHash, 'payScriptUrl'),
}

export default [
  functionsRouterAddress,
  usdcTokenAddress,
  contractConfig,
] as const;